<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>GetUrl</title>
    <link href="./bootstrap-5.3.0.min.css" rel="stylesheet">
    <script src="./jquery-3.7.1.min.js"></script>
    <style>
        .break {
            word-wrap: break-word;
            word-break: break-all;
        }

        .btn-sm {
            font-size: 0.85rem;
            margin: 4px 4px 2px 4px;
        }

        .input-group-text {
            cursor: pointer;
        }

        @media (max-width: 768px) {
            .table-responsive-stack thead {
                display: none;
            }

            .table-responsive-stack tr {
                display: flex;
                flex-direction: column;
                border: 1px solid #ddd;
                margin-bottom: 10px;
            }

            .table-responsive-stack td, .table-responsive-stack th {
                display: block;
                text-align: right;
                border: none;
            }

                .table-responsive-stack td::before {
                    content: attr(data-label);
                    float: left;
                    font-weight: bold;
                }
        }
    </style>
</head>
<body>
    <div class="container mt-5">
        <div class="mb-3">
            <label for="url" class="form-label">Url</label>
            <div class="input-group">
                <input type="text" class="form-control" id="url">
                <span class="input-group-text" id="clear-url">×</span>
            </div>
        </div>
        <div class="mb-3">
            <label for="referrer" class="form-label">Referrer</label>
            <div class="input-group">
                <input type="text" class="form-control" id="referrer">
                <span class="input-group-text" id="clear-referrer">×</span>
            </div>
        </div>
        <button id="submit" class="btn btn-primary">Submit</button>
        <button id="refresh" class="btn btn-secondary">Refresh</button>
        <div id="error-message" class="alert alert-danger mt-3" style="display: none;"></div>
        <div class="table-responsive">
            <table class="table table-responsive-stack table-striped mt-3">
                <thead>
                    <tr>
                        <th>TaskId</th>
                        <th>Metadata</th>
                        <th>Action</th>
                    </tr>
                </thead>
                <tbody id="table-body">
                    <!-- Data will be appended here -->
                </tbody>
            </table>
        </div>
        <div>
            <span id="infos"></span>
        </div>
    </div>

    <script>
        (function () {
            const httpStatusTexts = {
                200: 'OK',
                204: 'No Content',
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                405: 'Method Not Allowed',
                406: 'Not Acceptable',
                409: 'Conflict',
                500: 'Internal Server Error',
                503: 'Service Unavailable',
            };

            // UI
            function showError(title, statusCode, text) {
                $('#error-message').multiline(
                    `${statusCode} ${httpStatusTexts[statusCode] || 'Unknown Error'}\n${title}. ${text ?? ''}`).show();
            }
            function hideError() { $('#error-message').hide(); }
            function handleReferrerFocus() { $('#referrer').css('color', 'black'); }
            function handleClearUrl() { $('#url').val(''); $('#referrer').val(''); $('#url').trigger("focus"); }
            function handleClearReferrer() { $('#referrer').val(''); }
            function handleUrlInput() {
                const url = /https?:\/\/[-a-zA-Z0-9@:%._\+~#=]+[-a-zA-Z0-9@:%_\+.~#?&/=]*/.exec($('#url').val());
                const referrer = getUrlParent(url);
                url && $('#url').val(url);
                $('#referrer').val(referrer).css('color', 'grey');
            }

            // Helper Functions
            function getUrlParent(fullUrl) {
                try {
                    var url = new URL(fullUrl);
                    var baseUrl = url.origin;
                    var path = url.pathname;
                    if (path !== "" && !path.endsWith("/")) {
                        path = path.substring(0, path.lastIndexOf("/") + 1);
                    }
                    return baseUrl + path;
                } catch (e) {
                    return "";
                }
            }

            function formatSize(size) {
                const units = ['B', 'KB', 'MB', 'GB', 'TB'];
                let unitIndex = 0;
                while (size >= 1000 && unitIndex < units.length - 1) {
                    size /= 1024;
                    unitIndex++;
                }
                return `${size.toFixed(Math.min(unitIndex, 2))}${units[unitIndex]}`;
            }

            function truncateUrl(url, maxLength = 100) {
                if (url.length <= maxLength) {
                    return url;
                }
                const origin = new URL(url).origin;
                const truncatedPart = url.slice(-maxLength + origin.length + 9);
                return `${origin}/......${truncatedPart}`;
            }

            function truncateText(text, maxLength = 200) {
                if (text.length <= maxLength) {
                    return text;
                }
                const firstPart = text.slice(0, maxLength / 2 - 4);
                const truncatedPart = text.slice(-maxLength / 2 + 4);
                return `${firstPart}/......${truncatedPart}`;
            }

            function calcSizeText(item) {
                const showEstimated = item.estimatedLength >= 0 && item.status == 2;
                const showDownloaded = item.status != 3 || !showEstimated;
                var result = '';
                if (showDownloaded)
                    result += formatSize(item.downloadedLength);
                if (showDownloaded && showEstimated)
                    result += ' / ';
                if (showEstimated)
                    result += formatSize(item.estimatedLength);
                return result;
            }

            function mapStatusToEmoji(status) {
                switch (status) {
                    case 0: return '\ud83d\udd52';      // Pending
                    case 1: return '\ud83d\udd75\u2753';// NotFound
                    case 2: return '\u23f3';            // Downloading
                    case 3: return '\ud83d\udee0';      // Merging
                    case 4: return '\ud83d\udd36';      // PartiallyCompleted
                    case 5: return '\u2705';            // Completed
                    default: return '\u274c';           // Error -1
                }
            }

            function htmlEscape(str) {
                return str
                    .replace(/&/g, '&amp;')
                    .replace(/</g, '&lt;')
                    .replace(/>/g, '&gt;')
                    .replace(/"/g, '&quot;')
                    .replace(/'/g, '&#39;');
            }

            // Api url
            const apiUrl = getUrlParent(window.location.href) + 'task';
            const apiInfo = getUrlParent(window.location.href) + 'info';

            // Request Functions
            function refreshTable() {
                hideError();
                $.get(apiUrl, function (taskItem) {
                    $('#table-body').empty();
                    taskItem.forEach(function (item) {
                        var seq = 0;
                        var filelines = '';
                        if (item[0].contentText) {
                            filelines += `<tr><td colspan="3">${item[0].contentText}</td></tr>`;
                        }
                        item.forEach(function (file) {
                            if (file.isHide)
                                return;
                            filelines +=
                                `<tr>
                                    <td data-label="\u2116">${++seq}</td>
                                    <td data-label="File" class="break">${mapStatusToEmoji(file.status)}<a target="_blank" href="./hg-${file.taskId}/${encodeURIComponent(file.fileName)}">${file.fileName ?? ''}</a> ${file.errorMessage ?? ''}</td>
                                    <td data-label="Size">${calcSizeText(file)}</td>
                                </tr>`;
                        });
                        var subtable =
                            `<div class="table-responsive">
                                <table class="table table-sm">
                                    <thead>
                                        <tr>
                                            <th>&#x2116;</th>
                                            <th>File</th>
                                            <th>Size</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                    ${filelines}
                                    </tbody>
                                </table>
                                ${seq > 1 ? '<button class="btn btn-sm btn-light copylink-btn">Copy Links</button>' : ''}
                            </div>`;
                        $('#table-body').append(
                            `<tr>
                                <td data-label="TaskId">${item[0].taskId}</td>
                                <td><div><a rel="noreferrer" target="_blank" class="break" href="${item[0].url}">${truncateUrl(item[0].url)}</a> ${item[0].errorMessage ?? ''} ${subtable}</div></td>
                                <td data-label="Action"><button class="btn btn-sm btn-secondary resume-btn" data-taskid="${item[0].taskId}">Resume</button><button class="btn btn-danger btn-sm delete-btn" data-taskid="${item[0].taskId}" data-files="${htmlEscape(item.filter(x => !x.isHide).map(x => x.fileName).join(','))}">Delete</button></td>
                            </tr>`
                        );
                    });
                    $('.copylink-btn').off('click').on('click', handleCopyLinks);
                    $('.resume-btn').off('click').on('click', handleResume);
                    $('.delete-btn').off('click').on('click', handleDelete);
                }).fail(function (jqXHR, textStatus, errorThrown) {
                    showError('Failed to refresh data', jqXHR.status, jqXHR.responseJSON);
                });
                $.get(apiInfo, function (data) {
                    $('#infos').text(`FreeSpace: ${formatSize(data.diskUsage.freeSpace)} / DiskSize: ${formatSize(data.diskUsage.diskSize)}; Protocol: ${data.protocol}`);
                });
            }

            function handleSubmit() {
                hideError();
                const url = $('#url').val();
                const referrer = $('#referrer').val();
                $.ajax({
                    url: apiUrl,
                    type: 'POST',
                    data: JSON.stringify({ Url: url, Referrer: referrer }),
                    contentType: 'application/json',
                    success: function (response) {
                        console.log(`Data submitted: ${url}`, response);
                        refreshTable();
                    },
                    error: function (jqXHR, textStatus, errorThrown) {
                        showError('Failed to submit data', jqXHR.status, jqXHR.responseJSON);
                    }
                });
            }

            function handleCopyLinks() {
                const td = $(this).closest('td').find('table');
                var links = '';
                td.find('a').each(function () {
                    const relativeUrl = $(this).attr('href');
                    const absoluteUrl = new URL(relativeUrl, window.location.href).href;
                    links += absoluteUrl + '\n';
                });
                navigator.clipboard.writeText(links);
            }

            function handleResume() {
                const taskId = $(this).data('taskid');
                $.ajax({
                    url: `${apiUrl}?taskId=${taskId}`,
                    type: 'PATCH',
                    success: function (response) {
                        console.log(`PATCH for resume: ${url}`, response);
                        refreshTable();
                    },
                    error: function (jqXHR, textStatus, errorThrown) {
                        showError(`Failed to resume task ${taskId}`, jqXHR.status, jqXHR.responseJSON);
                    }
                });
            }

            function handleDelete() {
                const taskId = $(this).data('taskid');
                const files = $(this).data('files');
                if (confirm(`Are you sure you want to delete this item?\nTaskId: ${taskId}\nFiles: ${truncateText(files)}`)) {
                    $.ajax({
                        url: `${apiUrl}?taskId=${taskId}`,
                        type: 'DELETE',
                        success: function (response) {
                            console.log(`Data deleted: ${taskId}`, response);
                            refreshTable();
                        },
                        error: function (jqXHR, textStatus, errorThrown) {
                            showError(`Failed to delete task ${taskId}`, jqXHR.status, jqXHR.responseJSON);
                        }
                    });
                }
            }

            $.fn.multiline = function (text) {
                this.text(text);
                this.html(this.html().replace(/\n/g, '<br/>'));
                return this;
            }

            // Event Bindings
            $(document).ready(function () {
                $('#url').on('input', handleUrlInput);
                $('#referrer').focus(handleReferrerFocus);
                $('#submit').click(handleSubmit);
                $('#refresh').click(refreshTable);
                $('#clear-url').click(handleClearUrl);
                $('#clear-referrer').click(handleClearReferrer);
                $(document).on('visibilitychange', function () { !document.hidden && refreshTable(); });
                setInterval(refreshTable, 15000);

                // Automatically refresh table on page load
                refreshTable();
            });
        })();
        document.title += ' - ' + window.location.hostname;
    </script>
</body>
</html>
